<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/24/JVM_GC_clear/"/>
    <url>/2024/11/24/JVM_GC_clear/</url>
    
    <content type="html"><![CDATA[<h2 id="一、标记-清除算法"><a href="#一、标记-清除算法" class="headerlink" title="一、标记-清除算法"></a>一、标记-清除算法</h2><p><strong>执行过程</strong>：当堆内存中的有效内存空间（available memory）被耗尽的时候，整个程序就会停止（即 Stop The World），然后两项工作一起进行，第一项工作是标记，第二项工作是删除</p><ul><li>标记：Collector 从引用的根节点开始遍历，<code>&lt;font color=&quot;red&quot;&gt;</code>标记所有被引用的对象 <code>&lt;/font&gt;</code>。一般实在对象的 Header 中记录为可达对象。</li><li>清除：Collector 对堆内存从头到尾进行遍历，如果发现某个对象在其 Header 中没有被标记为可达对象，则将其回收</li></ul><p><strong>缺点</strong>：</p><ol><li>效率较低，对整个堆内存进行两次遍历</li><li>在进行 GC 的过程中需要 STW 用户体验较差</li><li>清楚之后内存空间不连续，产生内存碎片</li></ol><blockquote><p>什么是清楚，不是直接释放内存空间，而是把没有引用的对象地址放入空闲列表中，下次有新的对象需要进行加载的时判断垃圾的位置空间够不够，如果够就就存放</p></blockquote><h2 id="二、复制算法"><a href="#二、复制算法" class="headerlink" title="二、复制算法"></a>二、复制算法</h2><p><strong>算法的思想</strong>：将堆内存空间分为完全相等的两部分，每次只使用其中一块，在垃圾回收时将正在使用的内存中存活的对象复制到未使用的内存中，之后清楚正在使用的内存中的所有对象，交换两个内存空间的引用，最后完成垃圾回收。</p><p><strong>优点</strong>：</p><ul><li>没有标记和清除的过程，实现简单，运行高效</li><li>复制过去的以后保证的空间的连续性，不会出现 “碎片” 问题<br><strong>缺点</strong>：</li><li>内存利用率低</li><li>对于 G1 这种拆分为多个 region 的 GC，复制而不是移动，意味着 GC 需要维护 region 之间的引用关系，不管内存占用或者时间开销都不小</li><li>如果系统中的存活对象很多，复制效率会较低</li></ul><blockquote><p>这种算法的应用场景多在新生代，对象朝生夕死，复制效率较高，回收性价比很高</p></blockquote><h2 id="三、标记-压缩算法"><a href="#三、标记-压缩算法" class="headerlink" title="三、标记-压缩算法"></a>三、标记-压缩算法</h2><p><strong>已经有了上面两个算法了为什么还会出现这个算法呢？</strong><br>首先，标记-清楚算法效率不高且会影响用户体验，其次复制算法的高效性是建立在存活对象较少的情况，这种情况在新生代较多，但是老年代更常见的情况大部分都是存活对象，如果依然使用复制算法，复制成本会很高。因此，基于老年代中对象的特性，标记-压缩算法应运而生。</p><p><strong>执行过程</strong>：<br>第一阶段和标记-清除算法一样，从根节点开始标记所有引用对象，第二阶段将所有的存活对象压缩到内存的一端，按顺序摆放，之后，清楚边界意外的所有内存</p><p>标记-压缩算法执行后的效果就相当于标记-清除算法执行后再进行一次内存碎片的整理工作<br>二者之间的本质差别是标记-清除是一种非移动式的回收算法，而标记-复制算法则是移动式的。<br>经过标记-压缩算法，标记的存活对象将会被整理按照内存地址依次排列，而未被标记的内存会被清理掉，如此一来，当我们需要给新对象分配内存的时候，只需要 JVM 持有一个边界地址（使用指针碰撞的方式进行内存分配，如果对指针碰撞不了解就去看我之前的文章）就可以了，这比维护一个空闲链表少了许多开销</p><p><strong>优点</strong>：</p><ul><li>消除了标记-清除算法中，内存区域分散的缺点，我们需要重新分配内存时，JVM 只需要持有一个内存的起始地址即可。</li><li>消除复制算法中，内存利用率不高的代价</li></ul><p><strong>缺点</strong>：</p><ul><li>从效率上来说不如复制算法，需要标记所有存活对象，还要整理所有存活对象的引用地址。对于老年代每次都有大量对象存活的区域来说，极为负重。</li><li>并且移动对象的同时，如果这个对象还被其他对象引用，还需要调整引用的地址。</li><li>移动过程中会出现 STW。</li></ul><blockquote><p>明确了以上三种回收算法的特点，并且基于读者已经明确了 JVM 堆内存是分区的这件事，我们就能知道 GC 分代进行的，事实也确实如此，目前几乎所有的 GC 都是采用分代收集算法执行垃圾回收的。</p></blockquote><h3 id="在-HotSpot-中，基于分代的概念，GC-所使用的内存回收算法必须结合年轻代和老年代各自的特点。"><a href="#在-HotSpot-中，基于分代的概念，GC-所使用的内存回收算法必须结合年轻代和老年代各自的特点。" class="headerlink" title="在 HotSpot 中，基于分代的概念，GC 所使用的内存回收算法必须结合年轻代和老年代各自的特点。"></a>在 HotSpot 中，基于分代的概念，GC 所使用的内存回收算法必须结合年轻代和老年代各自的特点。</h3><ul><li>年轻代：<ul><li>特点：区域相对较小，对象生命周期短、存活率低、回收频繁</li><li>这种情况，复制算法的效率是最高的，复制算法的效率之和当前存活的对象有关，因此很适用于年轻代回收，而复制算法内存利用率不高，通过 HotSpot 中 survivor 的设计得到缓解。</li></ul></li><li>老年代：<ul><li>特点：区域较大、对象声明周期长、存活率高、回收不如年轻代频繁</li><li>这中种存在大量对象存活的区域，复制算法显得不那么合适，一般是采用标记-清除和标记-整理的混合实现。</li></ul></li></ul><blockquote><ul><li>Mark阶段的开销与存活对象的数量成正比</li><li>Sweep阶段的开销与管理的区域大小成正比</li><li>Compact 阶段的开销与存活的对象数量成正比</li></ul></blockquote><h2 id="增量收集算法"><a href="#增量收集算法" class="headerlink" title="增量收集算法"></a>增量收集算法</h2><p>上述现有的算法，在垃圾回收过程中，应用软件将处于一种Stop the World 的状态。在Stop the World 状态下，应用程序所有的线程都会挂起，暂停一切正常的工作，等待垃圾回收的完成。如果垃圾回收时间过长，应用程序会被挂起很久，将严重影响用户体验或者系统的稳定性。为了解决这个问题，即对实时垃圾收集算法的研究直接导致了增量收集（Incremental Collecting）算法的诞生。</p><p><strong>基本思想</strong>：<br>如果一次性将所有的垃圾进行处理，需要造成系统长时间的停顿，那么就可以让垃圾收集线程和应用程序线程交替执行。每次，垃圾收集线程只收集一小片区域的内存空间，接着切换到应用程序线程。依次反复，直到垃圾收集完成。</p><p>总的来说，增量收集算法的基础仍是传统的标记-清除和复制算法。增量收集算法通过对线程间冲突的妥善处理，允许垃圾收集线程以分阶段的方式完成标记、清理或复制工作。</p><p><strong>缺点</strong>：<br>使用这种方式，由于在垃圾回收过程中，间断性地还执行了应用程序代码，所以能减少系统的停顿时间。但是，因为线程切换和上下文转换的消耗，会使得垃圾回收的总体成本上升，造成系统吞吐量的下降。</p><h2 id="分区算法：-—-G1-GC-使用的算法"><a href="#分区算法：-—-G1-GC-使用的算法" class="headerlink" title="分区算法： —- G1 GC 使用的算法"></a>分区算法： —- G1 GC 使用的算法</h2><p>分代算法将按照对象的生命周期长短划分成两个部分，分区算法将整个堆空间划分成连续的不同小区间。<br><code>&lt;font color=&quot;red&quot;&gt;</code>每一个小区间都独立使用，独立回收。这种算法的好处是可以控制一次回收多少个小区间。<code>&lt;/font&gt;</code><br>一般来说，在相同条件下，堆空间越大，一次 GC 时所需要的时间越长，有关 GC 产生的停顿也越长，为了控制 GC 的停顿时间，将一个整块的内存分为多个小区域，根据目标控制停顿时间，每次合理的回收若干个小区域，而不是整个堆空间，从而减少一次 GC 所需要的时间</p><blockquote><p>以上就是 GC 垃圾回收阶段的相关算法啦，不要以为JVM 的内存回收篇已经结束了哦，还有垃圾回收器、日志等相关概念没介绍，让我们一起加油啃下这块内容</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/19/JVM_GC_mark_gr/"/>
    <url>/2024/11/19/JVM_GC_mark_gr/</url>
    
    <content type="html"><![CDATA[<h2 id="JVM-之垃圾回收算法"><a href="#JVM-之垃圾回收算法" class="headerlink" title="JVM 之垃圾回收算法"></a>JVM 之垃圾回收算法</h2><h3 id="一、既然提到了垃圾回收那么我们首先要明确的是什么是垃圾"><a href="#一、既然提到了垃圾回收那么我们首先要明确的是什么是垃圾" class="headerlink" title="一、既然提到了垃圾回收那么我们首先要明确的是什么是垃圾"></a>一、既然提到了垃圾回收那么我们首先要明确的是什么是垃圾</h3><p>垃圾的概念就是指程序运行过程中<code>&lt;font color=&quot;red&quot;&gt;</code>没有任何指针指向的对象<code>&lt;/font&gt;</code>，那么这样的对象就是需要被回收的垃圾</p><p>如果不能及时的对这些内存中的垃圾进行回收，那么这些垃圾就会一直占用空间到程序结束，被保留的空间无法被其他对象使用，从而可能导致内存溢出</p><h3 id="二、为什么需要GC？？？？"><a href="#二、为什么需要GC？？？？" class="headerlink" title="二、为什么需要GC？？？？"></a>二、为什么需要GC？？？？</h3><ul><li>一个基本的认知就是高级程序设计语言如果不进行垃圾回收那么最后一定会造成内存溢出。那么为了避免这样的现象就一定需要有垃圾回收机制进行垃圾清理。</li><li>而且，除了释放没用的对象外还可以整理 JVM 中碎片的内存区域，将不规整的小碎片区域进行整理，为后来可能出现的大对象预留空间</li><li>随着业务越来越庞大，代码越来越复杂，用户越来越多，传统的 STW 的垃圾回收方式已经跟不上需求，必须对传统的垃圾回收方式进行改进</li></ul><h3 id="三、主要对那些内存区域进行-GC"><a href="#三、主要对那些内存区域进行-GC" class="headerlink" title="三、主要对那些内存区域进行 GC"></a>三、主要对那些内存区域进行 GC</h3><p>垃圾回收器可以对 JVM 管理的所有内存区域进行垃圾回收，其中 <code>&lt;font color=&quot;red&quot;&gt;</code>堆区域<code>&lt;/font&gt;</code>是垃圾回收的重点<br>从次数上讲 应该是<code>&lt;font color=&quot;red&quot;&gt;</code>频繁的收集 young 区，较少回收 old 区，基本不动 Perm 区<code>&lt;/font&gt;</code></p><h3 id="四、这就到了这次的重头戏-——垃圾回收算法"><a href="#四、这就到了这次的重头戏-——垃圾回收算法" class="headerlink" title="四、&lt;font color=&quot;red&quot;&gt;这就到了这次的重头戏-——垃圾回收算法&lt;/font&gt;"></a>四、<code>&lt;font color=&quot;red&quot;&gt;</code>这就到了这次的重头戏-——垃圾回收算法<code>&lt;/font&gt;</code></h3><h4 id="4-1-判别阶段的算法"><a href="#4-1-判别阶段的算法" class="headerlink" title="4.1 判别阶段的算法"></a>4.1 判别阶段的算法</h4><h5 id="4-1-1-引用计数法"><a href="#4-1-1-引用计数法" class="headerlink" title="4.1.1 引用计数法"></a>4.1.1 引用计数法</h5><p><strong>什么是引用计数？</strong> 对于一个对象 A ，如果有其他的任何一个对象引用了 A ，则 A 的引用计数器加 1 ，当应用失效时，则该对象的引用计数器减 1 ，只要该对象的引用计数器为 0 则证明没有其他对象引用该对象，即当前对象引用失效，可以进行回收</p><p><strong>优点？</strong>  实现简单，垃圾对象便于标识，判定效率高，回收没有延迟性<br><strong>缺点？</strong></p><ul><li><code>&lt;font color=&quot;red&quot;&gt;</code>存在循环引用问题<code>&lt;/font&gt;</code>，可能会出现两个孤岛彼此相连无法回收的问题（主要问题）</li><li>它需要单独存储计数器，增加了空间开销</li><li>每次赋值都需要进行计数器的更新，增加了时间开销</li></ul><p><strong>就想用这个算法怎么办？？？？</strong><br>那么就要解决主要矛盾——循环引用问题的解决：Python就使用了引用计数的方法进行垃圾回收，那么 Python 是怎么解决的呢？</p><ul><li>首先就是使用手动解除，这很好理解，就是在合适的时候，解除引用关系</li><li>其次就是使用弱引用（weakref）</li></ul><blockquote><p>关于 Python 这作者只知道这些，余下的需要读者去进行补充</p></blockquote><h5 id="4-1-2-可达性分析算法"><a href="#4-1-2-可达性分析算法" class="headerlink" title="4.1.2 可达性分析算法"></a>4.1.2 可达性分析算法</h5><p>原理与基本实现思路：简单来说就是将对象之间的引用关系看成图，选定活动的对象作为 GC Roots ，然后跟踪引用链条，如果一个对象和 GC Roots 之间不可达，也就是不存在引用链条，那么即可认为是可回收对象。</p><p><strong>基本思路：</strong></p><ul><li>可达性分析算法是以根对象集合(GC Roots)为起始点，按照从上至下的方式搜索被根对象集合所连接的目标对象是否可达。</li><li>使用可达性分析算法后，内存中的存活对象都会被根对象集合直接或间接连接着，搜索所走过的路径称为引用链(Reference Chain)</li><li>如果目标对象没有任何引用链相连，则是不可达的，就意味着该对象己经死亡，可以标记为垃圾对象。</li><li>在可达性分析算法中，只有能够被根对象集合直接或者间接连接的对象才是存活对象。</li></ul><blockquote><p>目前，这种垃圾标记算法比较常用</p></blockquote><p><strong>优点：实现简单，执行高效，有效解决循环引用的问题，可以防止内存泄漏</strong></p><p><strong>什么样的对象可以被认为是 Gc Roots ？</strong></p><ul><li>虚拟机栈中引用的对象<ul><li>比如：各个线程被调用的方法中使用到的参数、局部变量等。</li></ul></li><li>本地方法栈内JNI(通常说的本地方法)引用的对象</li><li>类静态属性引用的对象<ul><li>比如：Java类的引用类型静态变量</li></ul></li><li>方法区中常量引用的对象<ul><li>比如：字符串常量池（String Table）里的引用</li></ul></li><li>所有被同步锁synchronized持有的对象</li><li>Java虚拟机内部的引用。<ul><li>基本数据类型对应的Class对象，一些常驻的异常对象（如：NullPointerException、OutOfMemoryError），系统类加载器。</li></ul></li><li>反映java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等</li></ul><p><strong><code>&lt;font color=&quot;red&quot;&gt;</code>注意：<code>&lt;/font&gt;</code></strong><br>如果要使用可达性分析算法来判断内存是否可回收，那么分析工作必须在一个能保障一致性的快照中进行。不满足这个条件的话分析结果的准确性就无法保证。<br>这也是导致 GC 必须进行 STW 的原因，即使是号称没有停顿的 CMS 收集器在枚举根节点时也会发生停顿。</p><blockquote><p>终于又让我水完了一篇文章，累鼠鼠鼠了，由于此篇文章篇幅已经很长，JVM 又很枯燥，所以就将回收算法中真正进行垃圾清除阶段的算法放在下一篇文章啦！！！！！！！</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/13/how_the_exection_works/"/>
    <url>/2024/11/13/how_the_exection_works/</url>
    
    <content type="html"><![CDATA[<h1 id="执行引擎篇"><a href="#执行引擎篇" class="headerlink" title="执行引擎篇"></a>执行引擎篇</h1><h2 id="1-1-执行引擎是做什么的？"><a href="#1-1-执行引擎是做什么的？" class="headerlink" title="1.1 执行引擎是做什么的？"></a>1.1 执行引擎是做什么的？</h2><ul><li>首先要明确一下执行引擎是 JVM 的重要组成部分之一</li><li>“虚拟机”是一个相对于”物理机”的概念，这两种机器都有代码执行的能力，其区别是物理机的执行引擎是<code>&lt;font color=&quot;red&quot;&gt;</code>直接建立在处理器、缓存、指令集和操作系统<code>&lt;/font&gt;</code>层面上的，而虚拟机的执行引擎则是由<code>&lt;font color=&quot;red&quot;&gt;</code>软件<code>&lt;/font&gt;</code>执行的，因此可以不收物理条件制约的定制指令集于执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式</li><li>JVM 的主要任务是负责装载<code>&lt;font color=&quot;red&quot;&gt;</code>字节码执行引擎内部<code>&lt;/font&gt;</code>，但字节码并不能直接运行在操作系统上，因为字节码指令并非等价于本地机器指令，它内部包含的是一些仅能被 JVM 识别的字节码指令、符号表，以及其他辅助信息</li><li>那么，如果想要让一个Java程序运行起来，执行引擎(Execution Engine)的任务就是将字节码指令解释&#x2F;编译为对应平台上的本地机器指令才可以。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者</li></ul><h2 id="1-2-执行引擎是怎么工作的呢？？？"><a href="#1-2-执行引擎是怎么工作的呢？？？" class="headerlink" title="1.2 执行引擎是怎么工作的呢？？？"></a>1.2 执行引擎是怎么工作的呢？？？</h2><p><strong>从外观上看，所有的 Java 虚拟机的执行引擎的输入、输出结果都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的的等效过程，输出的是执行结果</strong><br><img src="https://i-blog.csdnimg.cn/direct/1c5009549a994f8bbcd71f96be20510f.png" alt="请添加图片描述"></p><ul><li>执行引擎在执行的过程中就行需要执行怎么样的字节码指令完全依赖于 PC 寄存器</li><li>每当执行完一项指令操作之后，PC 寄存器就会更新下一条需要被执行的指令地址</li><li>当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确的在 Java 堆信息中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息</li></ul><h2 id="1-3-代码编译和执行的过程"><a href="#1-3-代码编译和执行的过程" class="headerlink" title="1.3 代码编译和执行的过程"></a>1.3 代码编译和执行的过程</h2><h3 id="1-3-1-什么是编译？"><a href="#1-3-1-什么是编译？" class="headerlink" title="1.3.1 什么是编译？"></a>1.3.1 什么是编译？</h3><p>Java 的编译期其实是一段不确定的操作过程，它可能是编译器前端把一个 .java 文件转化为 .class 文件的过程，也可能是后端运行期编译器（JIT Just In Time Compiler）把字节码转化为机器码的过程，还可能是指使用静态提前编译器（AOT Ahead Of Time Compiler）直接把 .java 文件编译为本地机器码的过程</p><h3 id="1-3-2-解释器工作机制（或工作任务）"><a href="#1-3-2-解释器工作机制（或工作任务）" class="headerlink" title="1.3.2 解释器工作机制（或工作任务）"></a>1.3.2 解释器工作机制（或工作任务）</h3><p>解释器真正的角色就是一个运行时的“翻译者”，将字节码文件中的内容”翻译”为对应平台的本地机器指令去执行，从这个角度来说，Java 是解释性的语言。当一条字节码指令被解释执行完成后，接着再根据PC寄存器中记录的下一条需要被执行的字节码指令执行解释操作。</p><h3 id="1-3-3-解释器的分类"><a href="#1-3-3-解释器的分类" class="headerlink" title="1.3.3 解释器的分类"></a>1.3.3 解释器的分类</h3><p>在Java的发展历史里，一共有两套解释执行器，即古老的字节码解释器、现在普遍使用的模板解释器。</p><ul><li>字节码解释器在执行时通过纯软件代码模拟字节码的执行，效率非常低下。</li><li>而模板解释器将每一条字节码和一个模板函数相关联，模板函数中直接产生这条字节码执行时的机器码，从而很大程度上提高了解释器的性能。在HotSpot VM中，解释器主要由Interpreter模块和Code模块构成。<ul><li>Interpreter模块：实现了解释器的核心功能</li><li>Code模块：用于管理HotSpot VM在运行时生成的本地机器指令</li></ul></li></ul><p><strong>只用解释器带来的问题？</strong></p><ul><li>基于解释器执行已经沦落为低效的代名词</li><li>为了解决这个问题，JVM平台支持一种叫作即时编译的技术。即时编译的目的是避免函数被解释执行，而是将整个函数体编译成为机器码，每次函数执行时，只执行编译后的机器码即可，这种方式可以使执行效率大幅度提升。</li><li>不过无论如何，基于解释器的执行模式仍然为中间语言的发展做出了不可磨灭的贡献。</li></ul><h3 id="1-3-4-Java-代码的执行分类"><a href="#1-3-4-Java-代码的执行分类" class="headerlink" title="1.3.4 Java 代码的执行分类"></a>1.3.4 Java 代码的执行分类</h3><ul><li>第一种是将源代码编译成字节码文件，然后在运行时通过解释器将字节码文件转为机器码执行</li><li>第二种是编译执行（直接编译成机器码）。现代虚拟机为了提高执行效率，会使用即时编译技术（JIT,Just In Time）将方法编译成机器码后再执行</li><li>HotSpot VM是目前市面上高性能虚拟机的代表作之一。它采用解释器与即时编译器并存的架构。在Java虚拟机运行时，解释器和即时编译器能够相互协作，各自取长补短，尽力去选择最合适的方式来权衡编译本地代码的时间和直接解释执行代码的时间。</li></ul><h3 id="那么问题来了，既然解释型语言效率不高，那么为什么还保留着解释器呢？"><a href="#那么问题来了，既然解释型语言效率不高，那么为什么还保留着解释器呢？" class="headerlink" title="那么问题来了，既然解释型语言效率不高，那么为什么还保留着解释器呢？"></a>那么问题来了，既然解释型语言效率不高，那么为什么还保留着解释器呢？</h3><p>首先明确：<br>当程序启动后，解释器可以马上发挥作用，省去编译的时间，立即执行。<br>编译器要想发挥作用，把代码编译成本地代码，需要一定的执行时间。但编译为本地代码后，执行效率高。<br>所以：<br>尽管JRockit VM中程序的执行性能会非常高效，但程序在启动时必然需要花费更长的时间来进行编译。对于服务端应用来说，启动时间并非是关注重点，但对于那些看中启动时间的应用场景而言，或许就需要采用解释器与即时编译器并存的架构来换取一个平衡点。在此模式下，当Java虚拟器启动时，解释器可以首先发挥作用，而不必等待即时编译器全部编译完成后再执行，这样可以省去许多不必要的编译时间。随着时间的推移，编译器发挥作用，把越来越多的代码编译成本地代码，获得更高的执行效率。</p><p>同时，解释执行在编译器进行激进优化不成立的时候，作为编译器的“逃生门”</p><blockquote><p>好啦，今天的文章就水到这里啦，还有详细的关于 Client Compiler 编译器和 Server Compiler编译器的内容就下次再讲啦！！！！！</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/11/12/JVM_object_memory_allocate/"/>
    <url>/2024/11/12/JVM_object_memory_allocate/</url>
    
    <content type="html"><![CDATA[<h1 id="1-对象的实例化"><a href="#1-对象的实例化" class="headerlink" title="1.对象的实例化"></a>1.对象的实例化</h1><h2 id="1-1-创建对象的方式"><a href="#1-1-创建对象的方式" class="headerlink" title="1.1 创建对象的方式"></a>1.1 创建对象的方式</h2><ol><li>使用 new 关键字</li><li>使用 clone() 方法，不调用构造器，但是类必须实现 Cloneable() 接口，实现 clone() ，默认是浅拷贝</li><li>使用 Class 的 newInstance() 方法：反射的方式，只能是空参的构造器，并且权限是 public</li><li>使用 Constructor 的 newInstance() 方法：反射的方式，可以调用空参、带参的构造函数，权限没有要求，使用更加广泛</li><li>反序列化：从文件、网络、数据库中获得一个二进制数据流，反序列化为对线</li><li>使用第三方库</li></ol><h2 id="1-2-对象创建的步骤"><a href="#1-2-对象创建的步骤" class="headerlink" title="1.2 对象创建的步骤"></a>1.2 对象创建的步骤</h2><h3 id="从字节码角度看对象创建的过程"><a href="#从字节码角度看对象创建的过程" class="headerlink" title="从字节码角度看对象创建的过程"></a>从字节码角度看对象创建的过程</h3><blockquote><p>C10K的问题我这 1 bit 的脑子不够用了，此处先省略2000字</p></blockquote><h3 id="从执行步骤角度分析"><a href="#从执行步骤角度分析" class="headerlink" title="从执行步骤角度分析"></a>从执行步骤角度分析</h3><ol><li>判断对象对应的类是否加载、链接、初始化。如果没有，在双亲委派机制下使用当前类加载器以 ClassLoader + 包名 + 类名为 key 进行查找对应的 .class 文件，如果没找到该文件，则抛出 ClassNotFoundExecption 异常，如果找到，则进行类加载，并生成对应的 Class 类的对象</li><li><code>&lt;font color=&quot;red&quot;&gt;</code>为对象分配内存：<code>&lt;/font&gt;</code><br>两种方式：<ul><li>指针碰撞：在内存规整的情况下，由一个指针指向内存中已使用和未使用的中间位置(说人话就是已使用的内存和未使用的内存分别在两边，中间有一条河作为分界线，这个河就是分界指针)，每次在需要分配内存的时候，将指针向未使用空间移动要分配的大小。如果虚拟机使用的是 Serial、ParNew 这种基于压缩算法的，虚拟机栈采用这种分配方式分配内存。</li><li>空闲列表：如果内存不是规整的，则使用空闲列表法进行对象空间分配。这个方法的意思是虚拟机维护了一个列表，记录着哪些内存是可用的，在分配的时候直接查找列表从列表中查找一块足够大的空间分配给对象实例，并更行列表内容。这种分配方式称为“空闲列表（Free List）”。</li></ul></li><li>处理并发安全问题：在创建对象的时候有可能会出现并发创建的问题，这个时候虚拟机需要保证线程安全性，虚拟机采用了两种方式实现：<ul><li>CAS（Compare And Swap）：失败重试、区域加锁：保证指针更新操作的原子性</li><li>TLAB 把内存分配的动作按照线程划分在不同的空间职中进行，即每个线程在 Java 堆中预先分配一小块内存，称为本地线程分配缓冲区，（TLAB ，Thread Local Allocation Buffer）虚拟机是否使用TLAB，可以通过-XX:+&#x2F;-UseTLAB参数来设定。</li></ul></li><li>初始化分配到的空间：内存分配结束，虚拟机将分配到的内存空间都初始化为零（不包含对象头）。这一步保证了对象的实例字段在 Java 代码中可以不用赋值就可以直接使用，程序能访问到这些数据类型兑现的字段的零值。</li><li>设置对象的对象头：将对象的所属类（即类的元数据信息）、对象的HashCode和对象的GC信息、锁信息等数据存储在对象的对象头中。这个过程的具体设置方式取决于JVM实现</li><li>执行 init 方法进行初始化：在Java程序的视角看来，初始化才正式开始。初始化成员变量，执行实例化代码块，调用类的构造方法，并把堆内对象的首地址赋值给引用变量。<br>因此一般来说（由字节码中是否跟随有invokespecial指令所决定），new指令之后会接着就是执行方法，把对象按照程序员的意愿进行初始化，这样一个真正可用的对象才算完全创建出来</li></ol><blockquote><p>至此对象的实例化才算完成</p></blockquote><h2 id="2-对象的内存布局"><a href="#2-对象的内存布局" class="headerlink" title="2. 对象的内存布局"></a>2. 对象的内存布局</h2><p>一个对象主要是有对象头和实力数据组成，还包括一个可能存在的对齐填充。接下来就让我们一起了解一下他们   ———-&gt;</p><h3 id="2-1-对象头："><a href="#2-1-对象头：" class="headerlink" title="2.1 对象头："></a>2.1 对象头：</h3><p>主要包括两部分：</p><ul><li><p>一个是对象自身的 <code>&lt;font color=&quot;red&quot;&gt;</code>运行时元数据（Mark Word）<code>&lt;/font&gt;</code>：</p><ul><li>哈希值（hashcode）：对象在堆空间中都有一个首地址值，栈空间的引用根据这个地址指向堆中的对象，这就是哈希值起的作用</li><li>GC 分代年龄：对象首先是在 Eden 中创建的，在经过多次 GC 后，如果没有被进行回收，就会在 survivor 中来回移动，其对应的年龄计数器就会发生变化，达到阈值后就会进入老年代</li><li>锁状态标志，在同步中判断该对象是否被占用</li><li>线程持有的锁</li><li>线程偏向 ID</li><li>偏向时间戳</li></ul></li><li><p>另一个就是类型指针，指向元数据区的类元数据 InstanceClass，确定该对象所属的类型</p></li><li><p>此外如果对象是一个数组，对象头中还必须有一块用于记录数组的长度的数据。因为正常对象元数据就知道对象的确切大小，所以数组必须得知道长度</p></li></ul><h3 id="2-2-实例数据"><a href="#2-2-实例数据" class="headerlink" title="2.2 实例数据"></a>2.2 实例数据</h3><p>作用：它是真正保存对象有效信息的，包括代码中定义的各种类型的字段（包括从父类继承下来的和本身拥有的字段）<br><code>&lt;br&gt;</code><br>这里需要遵守一些规则：</p><ul><li>相同宽度的字段总是被分配在一起</li><li>父类中定义的变量会出现在子类之前（因为父类的加载是优先于子类加载的）</li><li>如果CompactFields参数为true(默认为true)：子类的窄变量可能插入到父类变量的空隙</li></ul><h3 id="2-3-对齐填充"><a href="#2-3-对齐填充" class="headerlink" title="2.3 对齐填充"></a>2.3 对齐填充</h3><p>不是必须的，也没有特别含义，仅仅起到占位的作用</p><h2 id="3-对象的访问定位"><a href="#3-对象的访问定位" class="headerlink" title="3. 对象的访问定位"></a>3. 对象的访问定位</h2><p>创建对象的目的就是为了使用它。定位，通过 栈上 refence 访问</p><p>主流的对象访问方式有两种：</p><ul><li>使用句柄访问</li><li>使用直接指针访问</li></ul><blockquote><p>请读者注意，此处本人了解甚微，深入的内容请大家自行查阅补充</p></blockquote><h3 id="3-1-使用句柄访问："><a href="#3-1-使用句柄访问：" class="headerlink" title="3.1 使用句柄访问："></a>3.1 使用句柄访问：</h3><ul><li>实现：堆需要划分出一块内存来做句柄池，reference中存储对象的句柄池地址，句柄中包含对象实例与类型数据各自具体的地址信息。</li><li>好处：reference中存储稳定句柄地址，对象被移动（垃圾收集时移动对象很普遍）时只会改变句柄中实例数据指针，reference本身不需要被修改。</li></ul><h3 id="3-2-使用直接指针访问"><a href="#3-2-使用直接指针访问" class="headerlink" title="3.2 使用直接指针访问"></a>3.2 使用直接指针访问</h3><ul><li>实现：reference中存储的就是对象的地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销。</li><li>好处：速度更快，java中对象访问频繁，每次访问都节省了一次指针定位的时间开销</li></ul><p><strong>而 HotSpot这里主要使用第2种方式：直接指针访问</strong></p><p>JVM可以通过对象引用准确定位到Java堆区中的instanceOopDesc对象，这样既可成功访问到对象的实例信息，当需要访问目标对象的具体类型时，JVM则会通过存储在instanceOopDesc中的元数据指针定位到存储在方法区中的instanceKlass对象上</p><p>至此内存布局篇结束，希望广大读者发现问题及时纠正一下！！！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/2024/10/27/about/"/>
    <url>/2024/10/27/about/</url>
    
    <content type="html"><![CDATA[<h1 id="我使用了什么语言"><a href="#我使用了什么语言" class="headerlink" title="我使用了什么语言"></a>我使用了什么语言</h1><ul><li>HTML</li><li>Java</li><li>Python</li><li>SQL</li><li>Mark</li></ul><hr><h1 id="我使用的开发工具"><a href="#我使用的开发工具" class="headerlink" title="我使用的开发工具"></a>我使用的开发工具</h1><ul><li>IDEA</li><li>Github</li><li>CSDN “CSDN” : 一岁半大魔王</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
